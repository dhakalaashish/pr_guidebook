## 1. Project Goals & Vision

Contribute to JAX by answering questions, improving documentation, contributing to the codebase, or contributing to the broader JAX ecosystem.  The project adheres to Google’s Open Source Community Guidelines.  Contributions are highly valued.  Focus on issues marked with "contributions welcome" or "good first issue."  For other proposals, open a GitHub Issue or Discussion first.

## 2. Setup Instructions

1. **Fork and clone the repository:**

   ```bash
   git clone https://github.com/YOUR_USERNAME/jax
   cd jax
   ```

2. **Install dependencies:**

   ```bash
   pip install -r build/test-requirements.txt  # Installs testing requirements
   pip install -e ".[cpu]" # Installs JAX in editable mode
   ```

3. **Add upstream remote:**

   ```bash
   git remote add upstream https://www.github.com/jax-ml/jax
   ```

4. **Install pre-commit hooks:**

   ```bash
   pip install pre-commit
   pre-commit run --all-files
   ```

5. **Python Version:**  Python >= 3.11 is required.


## 3. Technical Design Alignment

Discuss proposed contributions (especially those not labeled "contributions welcome" or "good first issue") via a GitHub Issue or Discussion before submitting a PR.

## 4. Code Style & Language Best Practices

Use `mypy` and `ruff` for static code analysis. Run these checks locally via `pre-commit`:

```bash
pre-commit run --all-files
```

If your PR modifies documentation notebooks, this command will also run checks on them.

## 5. Performance Considerations

No explicit performance guidelines provided in the text.  However, given JAX's focus on composable transformations and JIT compilation to GPU/TPU, performance is likely a key aspect of code contributions. Consider performance implications when making changes and test thoroughly.  The project has a large test suite designed for performance testing, and some tests require a 64-bit environment:

```bash
JAX_ENABLE_X64=True pytest -n auto tests/
```

## 6. Commit Quality Standards

- **Single-change commits:** Each commit should represent a single, self-contained change with a descriptive message.
- **Squash commits before PR:** Multiple commits should be squashed into a single commit before submitting a PR (except for large refactors or internal rewrites). Use `git rebase -i` for this.
- **Commit message format:** Follow conventional commit message guidelines (not explicitly specified, but implied).

## 7. Pull Request Guidelines

- **Sign the Google Contributor License Agreement (CLA):**  See https://cla.developers.google.com/
- **Single commit PRs:** PRs should typically contain a single commit (exceptions for large refactors/rewrites).
- **Branch naming:** Use a descriptive branch name like `name-of-change`.
- **Push to remote:** `git push --set-upstream origin name-of-change`
- **Checklist:** Review the JAX pull request checklist before submitting.
- **"pull ready" label:** After review, a maintainer will mark the PR as "pull ready," triggering additional tests (including GPU and TPU tests).


## 8. Testing (Automated & Manual)

- **Automated testing:**
    - Run tests locally with `pytest`:  `pytest -n auto tests/`
    - Test in 64-bit mode by setting `JAX_ENABLE_X64=True` before running `pytest`.
    - Target specific test files: `pytest -n auto tests/lax_scipy_test.py`
    - Target specific tests within a file: `pytest -n auto tests/lax_scipy_test.py -k testLogSumExp`
    - GitHub CI will run a full test suite across various Python versions, dependencies, and configurations.
    - After review, a restricted test suite (including GPU/TPU tests) runs when the PR is marked "pull ready." Communicate with the assigned maintainer regarding any failures in this suite.


- **Manual testing:** Not explicitly mentioned, but testing any user-facing changes manually before submitting a PR is good practice.
