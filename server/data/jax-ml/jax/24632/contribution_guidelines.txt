## 1. Project Goals & Vision

Contribute to JAX by answering questions, improving documentation, contributing code, or contributing to the broader JAX ecosystem.  The project adheres to Google’s Open Source Community Guidelines.  Contributions are encouraged for issues marked with "contributions welcome" or "good first issue".  For other proposals, open a GitHub Issue or Discussion first.

## 2. Setup Instructions

1. **Fork and Clone:** Fork the JAX repository and clone it locally:
   ```bash
   git clone https://github.com/<YOUR_USERNAME>/jax
   cd jax
   ```

2. **Install Python:** Ensure you have Python >= 3.11 installed locally.

3. **Install Dependencies:** Install JAX and its testing requirements:
   ```bash
   pip install -r build/test-requirements.txt
   pip install -e ".[cpu]" 
   ```

4. **Add Upstream Remote:**
   ```bash
   git remote add upstream https://www.github.com/jax-ml/jax
   ```

## 3. Technical Design Alignment

For non-trivial contributions, open a GitHub Issue or Discussion to get feedback on your proposed changes before implementing them.

## 4. Code Style & Language Best Practices

- Run linters and type checkers before submitting a PR:
  ```bash
  pip install pre-commit
  pre-commit run --all
  ```
- Adhere to the project's code style guidelines (implicitly enforced by the linting process).  See "Linting and type-checking" section in the original text.

## 5. Performance Considerations

No specific performance guidelines provided, other than implied need to pass all tests, including those that run in 64-bit mode (see Testing section).

## 6. Commit Quality Standards

- **Single-change commits:** Each commit should represent a single, self-contained change with a descriptive message. Squash multiple commits before submitting a PR if necessary using `git rebase -i`.
- **Commit messages:** Follow best practices for writing commit messages (implied but not explicitly defined in the text).

## 7. Pull Request Guidelines

- **CLA:** Sign the Google Contributor License Agreement (CLA) before submitting your PR.
- **Single commit PRs:** PRs should typically contain a single commit (except for large refactors).
- **Branch naming:** Create a descriptive branch name (e.g., `name-of-change`).
- **Push your branch:**
   ```bash
   git push --set-upstream origin name-of-change
   ```
- **PR checklist:**  Review the "JAX pull request checklist" in the original document.  Key points include the CLA requirement and single-commit PRs.
- **`pull ready` label:** After review, a maintainer will mark your PR as `pull ready` to trigger additional tests. Be prepared to address any failures these tests might uncover.


## 8. Testing (Automated & Manual)

- **Local Testing:** Run tests locally using `pytest`:
    ```bash
    pytest -n auto tests/
    ```
- **64-bit Testing:** Run tests in 64-bit mode:
    ```bash
    JAX_ENABLE_X64=True pytest -n auto tests/
    ```
- **Targeted Testing:**  Run specific test files or individual tests:
    ```bash
    pytest -n auto tests/lax_scipy_test.py
    pytest -n auto tests/lax_scipy_test.py -k testLogSumExp 
    ```
- **GitHub CI:**  PRs are automatically tested on GitHub CI across various Python versions, dependencies, and configurations.
- **Restricted Test Suite (Post-Review):** After the PR is marked `pull ready`, a broader suite of tests, including GPU and TPU tests, will run.  Maintainers will communicate any failures from these tests.
- **Documentation Notebook Testing:** If your PR modifies documentation notebooks, additional checks will be run automatically. See "Update notebooks" (not provided in the given text).
