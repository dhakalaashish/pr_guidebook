# Contributing to JAX

For information on how to contribute to JAX, see
[Contributing to JAX](https://docs.jax.dev/en/latest/contributing.html)
Contributing to JAX — JAX  documentation
Skip to main content
Back to top
Ctrl
+
K
.md
.pdf
Contributing to JAX
Contents
Contributing to JAX
#
Everyone can contribute to JAX, and we value everyone’s contributions. There are several
ways to contribute, including:
Answering questions on JAX’s
discussions page
Improving or expanding JAX’s
documentation
Contributing to JAX’s
code-base
Contributing in any of the above ways to the broader ecosystem of
libraries built on JAX
The JAX project follows
Google’s Open Source Community Guidelines
.
Ways to contribute
#
We welcome pull requests, in particular for those issues marked with
contributions welcome
or
good first issue
.
For other proposals, we ask that you first open a GitHub
Issue
or
Discussion
to seek feedback on your planned contribution.
Contributing code using pull requests
#
We do all of our development using git, so basic knowledge is assumed.
Follow these steps to contribute code:
Sign the
Google Contributor License Agreement (CLA)
.
For more information, see the
JAX pull request checklist
below.
Fork the JAX repository by clicking the
Fork
button on the
repository page
. This creates
a copy of the JAX repository in your own account.
Install Python >= 3.11 locally in order to run tests.
pip
installing your fork from source. This allows you to modify the code
and immediately test it out:
git
clone
https://github.com/YOUR_USERNAME/jax
cd
jax
pip
install
-r
build/test-requirements.txt
# Installs all testing requirements.
pip
install
-e
".[cpu]"
# Installs JAX from the current directory in editable mode.
Add the JAX repo as an upstream remote, so you can use it to sync your
changes.
git
remote
add
upstream
https://www.github.com/jax-ml/jax
Create a branch where you will develop from:
git
checkout
-b
name-of-change
And implement your changes using your favorite editor (we recommend
Visual Studio Code
).
Make sure your code passes JAX’s lint and type checks, by running the following from
the top of the repository:
pip
install
pre-commit
pre-commit
run
--all
See
Linting and type-checking
for more details.
Make sure the tests pass by running the following command from the top of
the repository:
pytest
-n
auto
tests/
Run them in 64-bit mode as well, by setting the environment variable
JAX_ENABLE_X64=True
:
JAX_ENABLE_X64
=
True
pytest
-n
auto
tests/
JAX’s test suite is quite large, so if you know the specific test file that covers your
changes, you can limit the tests to that; for example:
pytest
-n
auto
tests/lax_scipy_test.py
You can narrow the tests further by using the
pytest
-k
flag to match particular test
names:
pytest
-n
auto
tests/lax_scipy_test.py
-k
testLogSumExp
JAX also offers more fine-grained control over which particular tests are run;
see
Running the tests
for more information.
Once you are satisfied with your change, create a commit as follows (
how to write a commit message
):
git
add
file1.py
file2.py
...
git
commit
-m
"Your commit message"
Then sync your code with the main repo:
git
fetch
upstream
git
rebase
upstream/main
Finally, push your commit on your development branch and create a remote
branch in your fork that you can use to create a pull request from:
git
push
--set-upstream
origin
name-of-change
Please ensure your contribution is a single commit (see
Single-change commits and pull requests
)
Create a pull request from the JAX repository and send it for review.
Check the
JAX pull request checklist
for considerations when preparing your PR, and
consult
GitHub Help
if you need more information on using pull requests.
JAX pull request checklist
#
As you prepare a JAX pull request, here are a few things to keep in mind:
Google contributor license agreement
#
Contributions to this project must be accompanied by a Google Contributor License
Agreement (CLA). You (or your employer) retain the copyright to your contribution;
this simply gives us permission to use and redistribute your contributions as
part of the project. Head over to
https://cla.developers.google.com/
to see
your current agreements on file or to sign a new one.
You generally only need to submit a CLA once, so if you’ve already submitted one
(even if it was for a different project), you probably don’t need to do it
again. If you’re not certain whether you’ve signed a CLA, you can open your PR
and our friendly CI bot will check for you.
Single-change commits and pull requests
#
A git commit ought to be a self-contained, single change with a descriptive
message. This helps with review and with identifying or reverting changes if
issues are uncovered later on.
Pull requests typically comprise a single git commit.
(In some cases, for
instance for large refactors or internal rewrites, they may contain several.)
In preparing a pull request for review, you may need to squash together
multiple commits. We ask that you do this prior to sending the PR for review if
possible. The
git
rebase
-i
command might be useful to this end.
Linting and type-checking
#
JAX uses
mypy
and
ruff
to statically test code quality; the
easiest way to run these checks locally is via the
pre-commit
framework:
pip
install
pre-commit
pre-commit
run
--all-files
If your pull request touches documentation notebooks, this will also run some checks
on those (See
Update notebooks
for more details).
Full GitHub test suite
#
Your PR will automatically be run through a full test suite on GitHub CI, which
covers a range of Python versions, dependency versions, and configuration options.
It’s normal for these tests to turn up failures that you didn’t catch locally; to
fix the issues you can push new commits to your branch.
Restricted test suite
#
Once your PR has been reviewed, a JAX maintainer will mark it as
pull
ready
. This
will trigger a larger set of tests, including tests on GPU and TPU backends that are
not available via standard GitHub CI. Detailed results of these tests are not publicly
viewable, but the JAX maintainer assigned to your PR will communicate with you regarding
any failures these might uncover; it’s not uncommon, for example, that numerical tests
need different tolerances on TPU than on CPU.
Contents