## 1. Project Goals & Vision

Contribute to JAX by answering questions, improving documentation, contributing to the codebase, or contributing to the broader ecosystem of JAX-based libraries.  The project follows Google's Open Source Community Guidelines.

## 2. Setup Instructions

1. **Fork and Clone:** Fork the JAX repository and clone your fork:

   ```bash
   git clone https://github.com/YOUR_USERNAME/jax
   cd jax
   ```

2. **Install Python:** Ensure you have Python >= 3.11 installed locally.

3. **Install Dependencies:** Install JAX and its testing requirements:

   ```bash
   pip install -r build/test-requirements.txt
   pip install -e ".[cpu]" 
   ```

4. **Add Upstream Remote:**

   ```bash
   git remote add upstream https://www.github.com/jax-ml/jax
   ```

## 3. Technical Design Alignment

Before starting significant work or non-trivial changes, open a GitHub Issue or Discussion to get feedback on your proposed contribution.  Prioritize issues labeled "contributions welcome" or "good first issue."

## 4. Code Style & Language Best Practices

Use `mypy` and `ruff` for static code analysis. Run these checks locally using `pre-commit`:

```bash
pip install pre-commit
pre-commit run --all-files
```

If your changes involve documentation notebooks, additional checks will be run automatically.

## 5. Performance Considerations

No specific performance considerations are mentioned beyond the standard testing procedures.  However, the repository description mentions JIT compilation to GPU/TPU, suggesting performance is a concern. Therefore, be mindful of performance implications when making changes, especially in performance-critical sections of the code.

## 6. Commit Quality Standards

- **Single-Change Commits:** Each commit should represent a single, self-contained change with a descriptive message.
- **Squash Commits Before PR:** Squash multiple commits into a single commit before submitting a pull request, unless it's a large refactor or internal rewrite.  Use `git rebase -i` for this.

## 7. Pull Request Guidelines

1. **Sign CLA:** Sign the Google Contributor License Agreement (CLA) before submitting a PR.  See https://cla.developers.google.com/.
2. **Single Commit PRs:**  Pull requests should typically contain a single commit (exceptions for large refactors or internal rewrites).
3. **Create Branch & Push:** Create a branch for your changes:

   ```bash
   git checkout -b name-of-change
   ```

   Implement your changes and push your branch to your fork:

   ```bash
   git push --set-upstream origin name-of-change
   ```
4. **Sync with Main:** Before submitting, sync your branch with the upstream main:

   ```bash
   git fetch upstream
   git rebase upstream/main
   ```
5. **Create PR:** Create a pull request from your forked repository on GitHub.
6. **PR Checklist:** Consult the JAX pull request checklist (mentioned in the original text, but not fully detailed here) for further considerations.
7. **"pull ready" Label:** After review, a maintainer will mark your PR as "pull ready" to trigger a broader test suite, including GPU and TPU tests.  The maintainer will communicate the results of these tests.


## 8. Testing (Automated & Manual)

- **Local Testing:** Run the test suite locally using `pytest`:

  ```bash
  pytest -n auto tests/
  ```

  Test in 64-bit mode by setting the environment variable `JAX_ENABLE_X64=True`:

  ```bash
  JAX_ENABLE_X64=True pytest -n auto tests/
  ```

  Target specific test files or individual tests using `pytest`'s filtering options like `-k`:

  ```bash
  pytest -n auto tests/lax_scipy_test.py -k testLogSumExp
  ```

  See the "Running the tests" section of the JAX documentation (not linked in the provided text) for more advanced testing options.

- **GitHub CI:**  PRs are automatically tested on GitHub CI across various Python versions, dependencies, and configurations.

- **Restricted Test Suite (GPU/TPU):** After review and the "pull ready" label, a larger test suite runs on GPU and TPU backends. Results are not publicly visible, but maintainers will communicate any failures.  Be prepared to adjust numerical tolerances for TPU compared to CPU.
